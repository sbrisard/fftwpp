<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="fftwpp_8hpp" kind="file" language="C++">
    <compoundname>fftwpp.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">complex</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">numeric</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">fftw3.h</includes>
    <incdepgraph>
      <node id="6">
        <label>numeric</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="9">
        <label>fftw3.h</label>
      </node>
      <node id="8">
        <label>vector</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp</label>
        <link refid="fftwpp_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="classfftwpp_1_1_plan" prot="public">fftwpp::Plan</innerclass>
    <innerclass refid="classfftwpp_1_1_plan_factory" prot="public">fftwpp::PlanFactory</innerclass>
    <innernamespace refid="namespacefftwpp">fftwpp</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fftw3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="namespacefftwpp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefftwpp" kindref="compound">fftwpp</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classfftwpp_1_1_plan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37" refid="classfftwpp_1_1_plan_1ad53e1968aace75749f103d86cdbee1e7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_1ad53e1968aace75749f103d86cdbee1e7" kindref="member">Plan</ref>(fftw_plan<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)<sp/>:<sp/>p{p,<sp/>[](fftw_plan<sp/>p)<sp/>{<sp/>fftw_destroy_plan(p);<sp/>}}<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classfftwpp_1_1_plan_1a659d1f910a0516d30f371845c62260d0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan_1a659d1f910a0516d30f371845c62260d0" kindref="member">execute</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>fftw_execute(p.get());<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classfftwpp_1_1_plan_1a4a8b3956511c2824e3915cc0ea044715" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan_1a4a8b3956511c2824e3915cc0ea044715" kindref="member">cost</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_cost(p.get());<sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classfftwpp_1_1_plan_1a3b3a21a1194c7c60fafc9bc33e9fdc6c" refkind="member"><highlight class="normal"><sp/><sp/>std::tuple&lt;double,<sp/>double,<sp/>double&gt;<sp/><ref refid="classfftwpp_1_1_plan_1a3b3a21a1194c7c60fafc9bc33e9fdc6c" kindref="member">flops</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>add,<sp/>mul,<sp/>fma;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_flops(p.get(),<sp/>&amp;add,<sp/>&amp;mul,<sp/>&amp;fma);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(add,<sp/>mul,<sp/>fma);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classfftwpp_1_1_plan_1a991c29592c2b510a4b0209370b75470d" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classfftwpp_1_1_plan_1a991c29592c2b510a4b0209370b75470d" kindref="member">repr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_str<sp/>=<sp/>fftw_sprint_plan(p.get());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cpp_str{c_str};</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>Check<sp/>that<sp/>fftw_free<sp/>is<sp/>really<sp/>the<sp/>function<sp/>that<sp/>needs<sp/>to<sp/>be<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(see<sp/>https://github.com/FFTW/fftw3/issues/238)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_free(c_str);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cpp_str;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;struct<sp/>fftw_plan_s&gt;<sp/>p;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">std::ostream<sp/>&amp;operator&lt;&lt;(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Plan<sp/>&amp;plan)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>plan.repr();</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classfftwpp_1_1_plan_factory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_flag(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/>flag;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_flag(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>^=<sp/>flag;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="129" refid="classfftwpp_1_1_plan_factory_1a4a3b9ace05494212bbd8a52746ef062e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref><sp/><ref refid="classfftwpp_1_1_plan_factory_1a4a3b9ace05494212bbd8a52746ef062e" kindref="member">create_plan</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;size_t&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*in,<sp/>std::complex&lt;double&gt;<sp/>*out,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sign<sp/>!=<sp/>-1)<sp/>&amp;&amp;<sp/>(sign<sp/>!=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1<sp/>or<sp/>+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::reduce(shape.cbegin()<sp/>+<sp/>rank,<sp/>shape.cend(),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{1},<sp/>std::multiplies&lt;size_t&gt;()));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>shape_(shape.size());</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(shape.cbegin(),<sp/>shape.cend(),<sp/>shape_.begin(),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>return<sp/>static_cast&lt;int&gt;(n);<sp/>});</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=<sp/>fftw_plan_many_dft(</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rank),<sp/>shape_.data(),<sp/>stride,</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(out),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>sign,<sp/>flags);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classfftwpp_1_1_plan_factory_1abfc4425a5f2a77305381cb2066b699c9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref><sp/><ref refid="classfftwpp_1_1_plan_factory_1abfc4425a5f2a77305381cb2066b699c9" kindref="member">create_plan</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;size_t&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*in,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::reduce(shape.cbegin()<sp/>+<sp/>rank,<sp/>shape.cend(),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{1},<sp/>std::multiplies&lt;size_t&gt;()));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>shape_(shape.size());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(shape.cbegin(),<sp/>shape.cend(),<sp/>shape_.begin(),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>return<sp/>static_cast&lt;int&gt;(n);<sp/>});</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=<sp/>fftw_plan_many_dft_r2c(</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rank),<sp/>shape_.data(),<sp/>stride,<sp/>in,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(out),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>flags);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight></codeline>
<codeline lineno="184"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classfftwpp_1_1_plan_factory_1a93736389af57a72a5403288f14a8f622" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref><sp/><ref refid="classfftwpp_1_1_plan_factory_1a93736389af57a72a5403288f14a8f622" kindref="member">create_plan</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;size_t&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::reduce(shape.cbegin()<sp/>+<sp/>rank,<sp/>shape.cend(),</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{1},<sp/>std::multiplies&lt;size_t&gt;()));</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>shape_(shape.size());</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>std::transform(shape.cbegin(),<sp/>shape.cend(),<sp/>shape_.begin(),</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{<sp/>return<sp/>static_cast&lt;int&gt;(n);<sp/>});</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fftw_plan_many_dft_c2r(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rank),<sp/>shape_.data(),<sp/>stride,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride,<sp/>1,<sp/>out,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>flags);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208" refid="classfftwpp_1_1_plan_factory_1a9d2ed06c2094bb610aa8ca4255c37c02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="classfftwpp_1_1_plan_factory_1a9d2ed06c2094bb610aa8ca4255c37c02" kindref="member">get_flags</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;<sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="classfftwpp_1_1_plan_factory_1af27a4117226e967b6521722517d4f782" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1af27a4117226e967b6521722517d4f782" kindref="member">set_estimate</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_ESTIMATE);<sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="classfftwpp_1_1_plan_factory_1a8c2190d70f21c73871bcbf07eb87f905" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a8c2190d70f21c73871bcbf07eb87f905" kindref="member">unset_estimate</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_ESTIMATE);<sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classfftwpp_1_1_plan_factory_1a0dd5b93c6f6d84c5ad3a9ac09065fea3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a0dd5b93c6f6d84c5ad3a9ac09065fea3" kindref="member">set_measure</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_MEASURE);<sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="classfftwpp_1_1_plan_factory_1a528cdb77b6e406e2f4e6c2d0776c9b4a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a528cdb77b6e406e2f4e6c2d0776c9b4a" kindref="member">unset_measure</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_MEASURE);<sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classfftwpp_1_1_plan_factory_1adf4642b8edf38eef4fdc682b6bce0afb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1adf4642b8edf38eef4fdc682b6bce0afb" kindref="member">set_patient</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_PATIENT);<sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classfftwpp_1_1_plan_factory_1ae07f6c609a16eba9216559d213b7ee76" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1ae07f6c609a16eba9216559d213b7ee76" kindref="member">unset_patient</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_PATIENT);<sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="classfftwpp_1_1_plan_factory_1a3088631cb09b2ea07b372d7d949173ca" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a3088631cb09b2ea07b372d7d949173ca" kindref="member">set_exhaustive</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_EXHAUSTIVE);<sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classfftwpp_1_1_plan_factory_1a4e70ca06d67c96e21836e545cb8e5058" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a4e70ca06d67c96e21836e545cb8e5058" kindref="member">unset_exhaustive</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_EXHAUSTIVE);<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="classfftwpp_1_1_plan_factory_1a50264c3b8166291d40c16717810df726" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a50264c3b8166291d40c16717810df726" kindref="member">set_wisdom_only</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_WISDOM_ONLY);<sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classfftwpp_1_1_plan_factory_1a36ad0d3c1cad972d0662f40bfaed3f11" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a36ad0d3c1cad972d0662f40bfaed3f11" kindref="member">unset_wisdom_only</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_WISDOM_ONLY);<sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="classfftwpp_1_1_plan_factory_1ac0a903e9c028ba7e30c8d95cb75476c5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1ac0a903e9c028ba7e30c8d95cb75476c5" kindref="member">set_destroy_input</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_DESTROY_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classfftwpp_1_1_plan_factory_1a84a56a6aabcacff0f66c25dc7d89f67a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a84a56a6aabcacff0f66c25dc7d89f67a" kindref="member">unset_destroy_input</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_DESTROY_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="classfftwpp_1_1_plan_factory_1adddab119ee547a5f19edf15397be1b14" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1adddab119ee547a5f19edf15397be1b14" kindref="member">set_preserve_input</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_PRESERVE_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classfftwpp_1_1_plan_factory_1aba3b1e10df1a063b2da075934fc2ab4a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1aba3b1e10df1a063b2da075934fc2ab4a" kindref="member">unset_preserve_input</ref>()<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_PRESERVE_INPUT);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="classfftwpp_1_1_plan_factory_1ac5725be4e1ca2faaa60150a994235fe7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1ac5725be4e1ca2faaa60150a994235fe7" kindref="member">set_unaligned</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_UNALIGNED);<sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="classfftwpp_1_1_plan_factory_1a872deb12fd6a512107d05aadbdfbbcbb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;<ref refid="classfftwpp_1_1_plan_factory_1a872deb12fd6a512107d05aadbdfbbcbb" kindref="member">unset_unaligned</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_UNALIGNED);<sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="namespacefftwpp_1a0f17f71507cb996cf8922eed003765c6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacefftwpp_1a0f17f71507cb996cf8922eed003765c6" kindref="member">init_threads</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_init_threads();<sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="namespacefftwpp_1ad5add8a1ad46c50f831c591bb8a898f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacefftwpp_1ad5add8a1ad46c50f831c591bb8a898f3" kindref="member">plan_with_nthreads</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads)<sp/>{<sp/>fftw_plan_with_nthreads(nthreads);<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fftwpp</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp"/>
  </compounddef>
</doxygen>
