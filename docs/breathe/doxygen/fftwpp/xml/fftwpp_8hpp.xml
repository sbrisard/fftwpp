<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="fftwpp_8hpp" kind="file" language="C++">
    <compoundname>fftwpp.hpp</compoundname>
    <includes local="no">fftw/fftw3.h</includes>
    <includes local="no">complex</includes>
    <includes local="no">cstdlib</includes>
    <includes local="no">iostream</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="6">
        <label>string</label>
      </node>
      <node id="7">
        <label>vector</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="2">
        <label>fftw/fftw3.h</label>
      </node>
      <node id="1">
        <label>C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp</label>
        <link refid="fftwpp_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>complex</label>
      </node>
    </incdepgraph>
    <innerclass refid="classfftw_1_1_plan" prot="public">fftw::Plan</innerclass>
    <innerclass refid="classfftw_1_1_plan_factory" prot="public">fftw::PlanFactory</innerclass>
    <innernamespace refid="namespacefftw">fftw</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fftw/fftw3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="namespacefftw" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacefftw" kindref="compound">fftw</ref><sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classfftw_1_1_plan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34" refid="classfftw_1_1_plan_1affb0f101e311e1c69f5a2b51e35ab648" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_1affb0f101e311e1c69f5a2b51e35ab648" kindref="member">Plan</ref>(fftw_plan<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>p)<sp/>:<sp/>p{p,<sp/>[](fftw_plan<sp/>p)<sp/>{<sp/>fftw_destroy_plan(p);<sp/>}}<sp/>{}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classfftw_1_1_plan_1a8c6909d8f4860b98c913267f15c9af05" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classfftw_1_1_plan_1a8c6909d8f4860b98c913267f15c9af05" kindref="member">execute</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>fftw_execute(p.get());<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classfftw_1_1_plan_1ad9ed1e3c3e9ef245cf4be2ee3aede8d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classfftw_1_1_plan_1ad9ed1e3c3e9ef245cf4be2ee3aede8d4" kindref="member">cost</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_cost(p.get());<sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="classfftw_1_1_plan_1a2205ff17d98babbf0d8abb40a6223f63" refkind="member"><highlight class="normal"><sp/><sp/>std::tuple&lt;double,<sp/>double,<sp/>double&gt;<sp/><ref refid="classfftw_1_1_plan_1a2205ff17d98babbf0d8abb40a6223f63" kindref="member">flops</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>add,<sp/>mul,<sp/>fma;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_flops(p.get(),<sp/>&amp;add,<sp/>&amp;mul,<sp/>&amp;fma);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(add,<sp/>mul,<sp/>fma);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classfftw_1_1_plan_1ae71aa816eb42207e97317719b152cb79" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classfftw_1_1_plan_1ae71aa816eb42207e97317719b152cb79" kindref="member">repr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*c_str<sp/>=<sp/>fftw_sprint_plan(p.get());</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>cpp_str{c_str};</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>std::free(c_str);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cpp_str;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;struct<sp/>fftw_plan_s&gt;<sp/>p;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classfftw_1_1_plan_factory" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_flag(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>|=<sp/>flag;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_flag(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>flag)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>flags<sp/>^=<sp/>flag;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref><sp/>create_plan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*in,<sp/>std::complex&lt;double&gt;<sp/>*out,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sign<sp/>!=<sp/>-1)<sp/>&amp;&amp;<sp/>(sign<sp/>!=<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1<sp/>or<sp/>+1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape.size();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>rank;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>i++)<sp/>stride<sp/>*=<sp/>shape[i];</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=<sp/>fftw_plan_many_dft(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank,<sp/>shape.data(),<sp/>stride,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(out),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stride,<sp/>1,<sp/>sign,<sp/>flags);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref><sp/>create_plan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*in,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape.size();</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>rank;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>i++)<sp/>stride<sp/>*=<sp/>shape[i];</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=<sp/>fftw_plan_many_dft_r2c(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank,<sp/>shape.data(),<sp/>stride,<sp/>in,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(out),<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>flags);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref><sp/>create_plan(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rank,<sp/>std::vector&lt;int&gt;<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;shape,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::complex&lt;double&gt;<sp/>*in,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sign)<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sign<sp/>!=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::invalid_argument(</highlight><highlight class="stringliteral">&quot;sign<sp/>must<sp/>be<sp/>-1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ndim<sp/>=<sp/>shape.size();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>stride<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>rank;<sp/>i<sp/>&lt;<sp/>ndim;<sp/>i++)<sp/>stride<sp/>*=<sp/>shape[i];</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>fftw_plan<sp/>p<sp/>=<sp/>fftw_plan_many_dft_c2r(</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rank,<sp/>shape.data(),<sp/>stride,<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">fftw_complex<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(in),</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>out,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/>stride,<sp/>1,<sp/>flags);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classfftw_1_1_plan" kindref="compound">Plan</ref>{p};</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>get_flags()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>flags;<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_estimate()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_ESTIMATE);<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_estimate()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_ESTIMATE);<sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_measure()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_MEASURE);<sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_measure()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_MEASURE);<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_patient()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_PATIENT);<sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_patient()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_PATIENT);<sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_exhaustive()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_EXHAUSTIVE);<sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_exhaustive()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_EXHAUSTIVE);<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_wisdom_only()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_WISDOM_ONLY);<sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_wisdom_only()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_WISDOM_ONLY);<sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_destroy_input()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_DESTROY_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_destroy_input()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_DESTROY_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_preserve_input()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_PRESERVE_INPUT);<sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_preserve_intput()<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_PRESERVE_INPUT);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;set_unaligned()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_flag(FFTW_UNALIGNED);<sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="classfftw_1_1_plan_factory" kindref="compound">PlanFactory</ref><sp/>&amp;unset_unaligned()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unset_flag(FFTW_UNALIGNED);<sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_threads()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fftw_init_threads();<sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>plan_with_nthreads(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nthreads)<sp/>{<sp/>fftw_plan_with_nthreads(nthreads);<sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_aligned(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*ptr)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::size_t<sp/>alignment<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>space<sp/>=<sp/>size;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>unaligned<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>aligned<sp/>=<sp/>std::align(alignment,<sp/>size,<sp/>unaligned,<sp/>space);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>aligned<sp/>==<sp/>unaligned;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fftw</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp"/>
  </compounddef>
</doxygen>
