<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="classfftwpp_1_1_plan_factory" kind="class" language="C++" prot="public">
    <compoundname>fftwpp::PlanFactory</compoundname>
    <includes refid="fftwpp_8hpp" local="no">fftwpp.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classfftwpp_1_1_plan_factory_1a36c188719b31631e0237af04cdf0aa1f" prot="private" static="no" mutable="no">
        <type>unsigned</type>
        <definition>unsigned fftwpp::PlanFactory::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="87" column="12" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1adf64b0481979cdc6e02a89987903e5cb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_flag</definition>
        <argsstring>(unsigned flag)</argsstring>
        <name>set_flag</name>
        <param>
          <type>unsigned</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the specified flag through a bitwise or (<computeroutput>|</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="90" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a69cbd91b5bb11dea610d30364f8378ee" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_flag</definition>
        <argsstring>(unsigned flag)</argsstring>
        <name>unset_flag</name>
        <param>
          <type>unsigned</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the specified flag though a bitwise xor (<computeroutput>^</computeroutput>). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="96" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="96" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a4a3b9ace05494212bbd8a52746ef062e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref></type>
        <definition>Plan fftwpp::PlanFactory::create_plan</definition>
        <argsstring>(size_t rank, std::vector&lt; size_t &gt; const &amp;shape, std::complex&lt; double &gt; *in, std::complex&lt; double &gt; *out, int sign)</argsstring>
        <name>create_plan</name>
        <param>
          <type>size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref> for a complex-to-complex transform.</para>
<para>This constructor uses the so-called “advanced interface” that allows to compute multiple transforms at a time. Refer to section 4.4, <emphasis>Advanced Interface</emphasis>, in the FFTW documentation (<ulink url="http://fftw.org/fftw3_doc/Advanced-Interface.html#Advanced-Interface">http://fftw.org/fftw3_doc/Advanced-Interface.html#Advanced-Interface</ulink>), for more details.</para>
<para>The input (<computeroutput>in</computeroutput>) and output (<computeroutput>out</computeroutput>) data arrays are stored in row-major order. Both arrays are assumed to have the same <computeroutput>shape</computeroutput>. Transforms are performed along the <computeroutput>rank</computeroutput> <emphasis>last</emphasis> axes of the arrays (the first axes are merely iterated over).</para>
<para>The <computeroutput>sign</computeroutput> parameter is used to ask for a forward (<computeroutput>sign == -1</computeroutput>, default value) or backward (<computeroutput>sign == +1</computeroutput>) transform. Note that backward transforms are <emphasis>not normalized</emphasis>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="120" column="8" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="120" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1abfc4425a5f2a77305381cb2066b699c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref></type>
        <definition>Plan fftwpp::PlanFactory::create_plan</definition>
        <argsstring>(size_t rank, std::vector&lt; size_t &gt; const &amp;shape, double *in, std::complex&lt; double &gt; *out, int sign)</argsstring>
        <name>create_plan</name>
        <param>
          <type>size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref> for a real-to-complex transform.</para>
<para>Note that the <computeroutput>sign</computeroutput> parameter is meaningless in the present case, and should not be specified.</para>
<para>See <ref refid="" kindref="compound">complex-to-complex plan creation</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="149" column="8" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="149" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a93736389af57a72a5403288f14a8f622" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref></type>
        <definition>Plan fftwpp::PlanFactory::create_plan</definition>
        <argsstring>(size_t rank, std::vector&lt; size_t &gt; const &amp;shape, std::complex&lt; double &gt; *in, double *out, int sign)</argsstring>
        <name>create_plan</name>
        <param>
          <type>size_t</type>
          <declname>rank</declname>
        </param>
        <param>
          <type>std::vector&lt; size_t &gt; const &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt; *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref> for a complex-to-real transform.</para>
<para>Note that the <computeroutput>sign</computeroutput> parameter is meaningless in the present case, and should not be specified.</para>
<para>See <ref refid="" kindref="compound">complex-to-complex plan creation</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="176" column="8" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="176" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a9d2ed06c2094bb610aa8ca4255c37c02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned fftwpp::PlanFactory::get_flags</definition>
        <argsstring>()</argsstring>
        <name>get_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the current bitwise or combination of planner flags.</para>
<para>These planner flags apply to all subsequently created instances of <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="199" column="12" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1af27a4117226e967b6521722517d4f782" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_estimate</definition>
        <argsstring>()</argsstring>
        <name>set_estimate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_ESTIMATE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="202" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a8c2190d70f21c73871bcbf07eb87f905" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_estimate</definition>
        <argsstring>()</argsstring>
        <name>unset_estimate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_ESTIMATE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="205" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a0dd5b93c6f6d84c5ad3a9ac09065fea3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_measure</definition>
        <argsstring>()</argsstring>
        <name>set_measure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_MEASURE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="208" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a528cdb77b6e406e2f4e6c2d0776c9b4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_measure</definition>
        <argsstring>()</argsstring>
        <name>unset_measure</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_MEASURE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="211" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="211" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1adf4642b8edf38eef4fdc682b6bce0afb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_patient</definition>
        <argsstring>()</argsstring>
        <name>set_patient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_PATIENT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="214" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="214" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1ae07f6c609a16eba9216559d213b7ee76" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_patient</definition>
        <argsstring>()</argsstring>
        <name>unset_patient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_PATIENT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="217" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a3088631cb09b2ea07b372d7d949173ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_exhaustive</definition>
        <argsstring>()</argsstring>
        <name>set_exhaustive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_EXHAUSTIVE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="220" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a4e70ca06d67c96e21836e545cb8e5058" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_exhaustive</definition>
        <argsstring>()</argsstring>
        <name>unset_exhaustive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_EXHAUSTIVE</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="223" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a50264c3b8166291d40c16717810df726" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_wisdom_only</definition>
        <argsstring>()</argsstring>
        <name>set_wisdom_only</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_WISDOM_ONLY</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="226" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a36ad0d3c1cad972d0662f40bfaed3f11" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_wisdom_only</definition>
        <argsstring>()</argsstring>
        <name>unset_wisdom_only</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_WISDOM_ONLY</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="229" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1ac0a903e9c028ba7e30c8d95cb75476c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_destroy_input</definition>
        <argsstring>()</argsstring>
        <name>set_destroy_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_DESTROY_INPUT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="232" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a84a56a6aabcacff0f66c25dc7d89f67a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_destroy_input</definition>
        <argsstring>()</argsstring>
        <name>unset_destroy_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_DESTROY_INPUT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="235" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1adddab119ee547a5f19edf15397be1b14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_preserve_input</definition>
        <argsstring>()</argsstring>
        <name>set_preserve_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_PRESERVE_INPUT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="238" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="238" bodyend="238"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1aba3b1e10df1a063b2da075934fc2ab4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_preserve_input</definition>
        <argsstring>()</argsstring>
        <name>unset_preserve_input</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_PRESERVE_INPUT</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="241" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="241" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1ac5725be4e1ca2faaa60150a994235fe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::set_unaligned</definition>
        <argsstring>()</argsstring>
        <name>set_unaligned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the <computeroutput>FFTW_UNALIGNED</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="246" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classfftwpp_1_1_plan_factory_1a872deb12fd6a512107d05aadbdfbbcbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classfftwpp_1_1_plan_factory" kindref="compound">PlanFactory</ref> &amp;</type>
        <definition>PlanFactory&amp; fftwpp::PlanFactory::unset_unaligned</definition>
        <argsstring>()</argsstring>
        <name>unset_unaligned</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unset the <computeroutput>FFTW_UNALIGNED</computeroutput> flag. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="249" column="15" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Factory class that is used to create new instances of <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref>.</para>
<para>Planner flags are set through <computeroutput>set_XXX()/unset_XXX()</computeroutput> methods. The user is referred to section 4.3.2, <emphasis>Planner Flags</emphasis>, in the FFTW documentation (<ulink url="http://fftw.org/fftw3_doc/Planner-Flags.html#Planner-Flags">http://fftw.org/fftw3_doc/Planner-Flags.html#Planner-Flags</ulink>), for a full description of the various flags.</para>
<para>This class exposes a fluent interface: all <computeroutput>set_XXX()/unset_XXX()</computeroutput> methods return the current object. This allows for chaining, like so</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>plan<sp/>=<sp/>factory.set_estimate().set_preserve_input().create_plan();</highlight></codeline>
</programlisting></para>
<para>Note that if no planner flags are set/unset, <ref refid="classfftwpp_1_1_plan" kindref="compound">Plan</ref> instances will be created with <computeroutput>flags</computeroutput> set to <computeroutput>0</computeroutput>. </para>
    </detaileddescription>
    <location file="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" line="85" column="1" bodyfile="C:/Users/sbrisard/Git/programmes/fftwpp/include/fftwpp/fftwpp.hpp" bodystart="85" bodyend="250"/>
    <listofallmembers>
      <member refid="classfftwpp_1_1_plan_factory_1a4a3b9ace05494212bbd8a52746ef062e" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>create_plan</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1abfc4425a5f2a77305381cb2066b699c9" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>create_plan</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a93736389af57a72a5403288f14a8f622" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>create_plan</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a36c188719b31631e0237af04cdf0aa1f" prot="private" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>flags</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a9d2ed06c2094bb610aa8ca4255c37c02" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>get_flags</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1ac0a903e9c028ba7e30c8d95cb75476c5" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_destroy_input</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1af27a4117226e967b6521722517d4f782" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_estimate</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a3088631cb09b2ea07b372d7d949173ca" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_exhaustive</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1adf64b0481979cdc6e02a89987903e5cb" prot="private" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_flag</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a0dd5b93c6f6d84c5ad3a9ac09065fea3" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_measure</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1adf4642b8edf38eef4fdc682b6bce0afb" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_patient</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1adddab119ee547a5f19edf15397be1b14" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_preserve_input</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1ac5725be4e1ca2faaa60150a994235fe7" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_unaligned</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a50264c3b8166291d40c16717810df726" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>set_wisdom_only</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a84a56a6aabcacff0f66c25dc7d89f67a" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_destroy_input</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a8c2190d70f21c73871bcbf07eb87f905" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_estimate</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a4e70ca06d67c96e21836e545cb8e5058" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_exhaustive</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a69cbd91b5bb11dea610d30364f8378ee" prot="private" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_flag</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a528cdb77b6e406e2f4e6c2d0776c9b4a" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_measure</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1ae07f6c609a16eba9216559d213b7ee76" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_patient</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1aba3b1e10df1a063b2da075934fc2ab4a" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_preserve_input</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a872deb12fd6a512107d05aadbdfbbcbb" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_unaligned</name></member>
      <member refid="classfftwpp_1_1_plan_factory_1a36ad0d3c1cad972d0662f40bfaed3f11" prot="public" virt="non-virtual"><scope>fftwpp::PlanFactory</scope><name>unset_wisdom_only</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
